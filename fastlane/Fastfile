# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  before_all do
    ENV["XCODEPROJ"] = "FastlaneSample.xcodeproj"
    ENV["GIT_REPO"] = "matsuda/FastlaneSample"
  end

  desc "build & release for app store"
  lane :store do
    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    bundle_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    profile = "AppStore #{bundle_identifier}"

    xcargs = {
      DEVELOPMENT_TEAM: team_id,
      CODE_SIGN_STYLE: "Manual",
      CODE_SIGN_IDENTITY: "Apple Distribution",
      PROVISIONING_PROFILE_SPECIFIER: profile,
    }

    gym(
      clean: true,
      xcargs: xcargs,
      export_options: {
        method: "app-store",
        provisioningProfiles: {
          bundle_identifier => profile
        }
      }
    )

    deliver(
      force: true,
      automatic_release: false,
      run_precheck_before_submit: false,
      precheck_include_in_app_purchases: false,
    )
  end

  desc "build & export for adhoc"
  lane :beta do
    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    bundle_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    profile = "Adhoc com.github bundle identifier"

    # update_project_team(
    #   teamid: team_id
    # )

    # update_code_signing_settings(
    #   team_id: team_id,
    #   code_sign_identity: "Apple Distribution",
    #   profile_name: profile,
    # )

    xcargs = {
      DEVELOPMENT_TEAM: team_id,
      CODE_SIGN_STYLE: "Manual",
      CODE_SIGN_IDENTITY: "Apple Distribution",
      PROVISIONING_PROFILE_SPECIFIER: profile,
    }

    gym(
      clean: true,
      xcargs: xcargs,
      export_options: {
        method: "ad-hoc",
        provisioningProfiles: {
          bundle_identifier => profile
        }
      }
    )
  end

  desc "download and upload dSYM files"
  lane :refresh_dsyms do |options|
    version = options[:version] || "latest"

    download_dsyms(
      version: version
    )
    upload_symbols_to_crashlytics
    clean_build_artifacts
  end

  desc "bump version"
  lane :bump_version do |options|
    ensure_git_branch(
      branch: "main"
    )

    current_version = get_version_number
    UI.message("Current version is '#{current_version}'")

    if options[:version]
      next_version = options[:version]

      # increment_version_number(
      #   version_number: next_version
      # )
    else
      # If not use `agvtool`
      version_array = current_version.split(".").map(&:to_i)
      version_array[1] = version_array[1] + 1
      next_version = version_array.join(".").to_s

      # increment_version_number(
      #   bump_type: "minor"
      # )
    end

    UI.user_error!("Next version is invalid.") if next_version.empty?

    # create branch
    UI.message("Next version is '#{next_version}'")
    branch = "bump_to_#{next_version}"
    UI.message("Branch name is #{branch}")
    Action.sh("git checkout -b #{branch}")

    increment_version_number(
      version_number: next_version
    )

    message = "Version bump to #{next_version}"
    commit_version_bump(
      message: message,
      xcodeproj: ENV["XCODEPROJ"]
    )

    push_to_git_remote(
      tags: false
    )

    create_pull_request(
      repo: ENV["GIT_REPO"],
      base: "main",
      title: message
    )
  end
end
