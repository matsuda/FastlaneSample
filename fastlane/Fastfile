# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "build & release for app store"
  lane :store do
    team_id = ENV["TEAM_ID"]
    bundle_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    profile = "AppStore #{bundle_identifier}"

    xcargs = {
      DEVELOPMENT_TEAM: team_id,
      CODE_SIGN_STYLE: "Manual",
      CODE_SIGN_IDENTITY: "Apple Distribution",
      PROVISIONING_PROFILE_SPECIFIER: profile,
    }

    gym(
      clean: true,
      xcargs: xcargs,
      export_options: {
        method: "app-store",
        provisioningProfiles: {
          bundle_identifier => profile
        }
      }
    )

    deliver(
      force: true,
      automatic_release: false,
      run_precheck_before_submit: false,
      precheck_include_in_app_purchases: false,
    )
  end

  desc "build & archive for adhoc"
  lane :build do
    team_id = ENV["TEAM_ID"]
    profile = "Adhoc com.github bundle identifier"
    bundle_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

    # update_project_team(
    #   teamid: team_id
    # )

    # update_code_signing_settings(
    #   team_id: team_id,
    #   code_sign_identity: "Apple Distribution",
    #   profile_name: profile,
    # )

    xcargs = {
      DEVELOPMENT_TEAM: team_id,
      CODE_SIGN_STYLE: "Manual",
      CODE_SIGN_IDENTITY: "Apple Distribution",
      PROVISIONING_PROFILE_SPECIFIER: profile,
    }

    gym(
      clean: true,
      xcargs: xcargs,
      export_options: {
        method: "ad-hoc",
        provisioningProfiles: {
          bundle_identifier => profile
        }
      }
    )
  end
end
