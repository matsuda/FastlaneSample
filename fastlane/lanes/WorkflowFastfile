platform :ios do

  desc "download and upload dSYM files"
  lane :refresh_dsyms do |options|
    version = options[:version] || "latest"

    download_dsyms(
      version: version
    )
    upload_symbols_to_crashlytics
    clean_build_artifacts
  end

  desc "bump version"
  lane :bump_version do |options|
    ensure_git_branch(
      branch: "main"
    )

    current_version = get_version_number
    UI.message("Current version is '#{current_version}'")

    if options[:version]
      next_version = options[:version]

      # increment_version_number(
      #   version_number: next_version
      # )
    else
      # If not use `agvtool`
      version_array = current_version.split(".").map(&:to_i)
      version_array[1] = version_array[1] + 1
      next_version = version_array.join(".").to_s

      # increment_version_number(
      #   bump_type: "minor"
      # )
    end

    UI.user_error!("Next version is invalid.") if next_version.empty?

    # create branch
    UI.message("Next version is '#{next_version}'")
    branch = "bump_to_#{next_version}"
    UI.message("Branch name is #{branch}")
    Action.sh("git checkout -b #{branch}")

    increment_version_number(
      version_number: next_version
    )

    message = "Version bump to #{next_version}"
    commit_version_bump(
      message: message,
      xcodeproj: ENV["XCODEPROJ"]
    )

    push_to_git_remote(
      tags: false
    )

    create_pull_request(
      repo: ENV["GIT_REPO"],
      base: "main",
      title: message
    )
  end

  desc "bump version"
  lane :try_bump_version do |options|
    current_version = get_version_number
    UI.message("Current version is '#{current_version}'")
    increment_version_number_in_xcodeproj(
      bump_type: 'minor'
    )
  end

end
